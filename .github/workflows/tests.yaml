---
name: Tests
"on":
  push:
  pull_request:
  schedule:
    # Run tests every Monday at 9:17 to catch regressions.
    - cron: "17 9 * * 1"

jobs:

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # See what each os came pre-installed with at:
        # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          - macos-11.0
          - macos-10.15
          - windows-2022
          - windows-2019
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - uses: actions/checkout@v3.0.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux - Fix runner cache folder permissions
        if: runner.os == 'Linux'
        run: |
          mkdir -p /home/runner/.cache
          sudo chown -R runner /home/runner/.cache

      ### Install or upgrade package managers on each platform, and made them
      ### ready to use for mpm.

      # Homebrew
      - name: macOS - Upgrade Homebrew
        if: runner.os == 'macOS'
        run: |
          brew update
      - name: Linux - Install Homebrew
        if: runner.os == 'Linux'
        run: >
          /bin/bash -c "$(curl -fsSL
          https://raw.githubusercontent.com/Homebrew/install/master/install.sh
          )"

      # Apt
      - name: Linux - Upgrade apt
        if: runner.os == 'Linux'
        run: |
          sudo apt update

      # Chocolatey
      - name: Windows - Upgrade Chocolatey
        if: runner.os == 'Windows'
        run: |
          choco upgrade chocolatey

      # NPM
      - name: "Linux - Ubuntu 18.04 - Install npm requirements"
        if: matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt install -y node-gyp nodejs-dev libssl1.0-dev
      - name: Linux - Install npm
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y npm
      - name: macOS - Install npm
        if: runner.os == 'macOS'
        run: |
          brew install npm
      - name: Windows - Upgrade npm
        if: runner.os == 'Windows'
        run: |
          npm install --global npm

      # Yarn
      - name: macOS - Install Yarn
        if: runner.os == 'macOS'
        run: |
          brew install yarn
      - name: Linux - Install Yarn
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://dl.yarnpkg.com/debian/pubkey.gpg \
            | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" \
            | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          sudo apt install -y yarn
      - name: Windows - Install Yarn
        if: runner.os == 'Windows'
        run: |
          choco install yarn

      # Composer
      - name: macOS - Upgrade Composer
        if: runner.os == 'macOS'
        run: |
          brew upgrade composer
      - name: Windows - Install Composer
        if: runner.os == 'Windows'
        run: |
          choco install composer

      # APM
      - name: macOS - Install Atom
        if: runner.os == 'macOS'
        run: |
          brew install --cask atom
      - name: Linux - Install Atom
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://packagecloud.io/AtomEditor/atom/gpgkey \
            | sudo apt-key add -
          echo "deb https://packagecloud.io/AtomEditor/atom/any/ any main" \
            | sudo tee /etc/apt/sources.list.d/atom.list
          sudo apt update
          sudo apt install -y atom
      - name: Windows - Install Atom
        if: runner.os == 'Windows'
        run: |
          choco install atom

      # MAS
      - name: macOS - Install mas
        if: runner.os == 'macOS'
        run: |
          brew install mas

      # Flatpak
      - name: Linux - Install Flatpak
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository -y ppa:alexlarsson/flatpak
          sudo apt install -y flatpak

      # DNF
      - name: Linux - Install DNF
        # XXX DNF has been added in Ubuntu 21.04, not before.
        if: matrix.os == 'ubuntu-21.04'
        # if: runner.os == 'Linux'
        run: |
          sudo apt install -y dnf

      # Snap
      - name: Linux - Upgrade Snapd
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y snapd

      # VSCode
      - name: macOS - Install VSCode
        if: runner.os == 'macOS'
        run: |
          brew install --cask visual-studio-code
      - name: Linux - Install VSCode
        if: runner.os == 'Linux'
        run:
          sudo snap install --classic code
      - name: Windows - Install VSCode
        if: runner.os == 'Windows'
        run: |
          choco install vscode

      # Gem
      - name: macOS & Windows - Upgrade gem
        if: runner.os != 'Linux'
        run: |
          gem update --system
      - name: Linux - Upgrade gem
        if: runner.os == 'Linux'
        run: |
          sudo gem update --system

      # Pip
      - name: Upgrade Pip
        run: |
          python -m pip install --upgrade pip

      # Prepare env for tests
      - name: Upgrade Poetry
        run: |
          python -m pip install --upgrade poetry
      - name: Hack to fix coverage
        # "Can't combine line data with arc data" error
        if: runner.os != 'Windows'
        run: |
          rm -rf .coverage*
      - name: macOS - Fix shallow clone
        # Sources:
        # https://stackoverflow.com/questions/45782694/how-to-remove-the-shallow-clone-warning-from-homebrew
        # https://stackoverflow.com/questions/65320304/error-while-updating-homebrew-on-my-macbook-pro-big-sur
        # https://github.com/Homebrew/brew/pull/9383
        # https://github.com/Homebrew/brew/pull/9447
        # https://github.com/Homebrew/brew/issues/9420
        # https://github.com/Homebrew/brew/issues/12791
        if: matrix.os == 'macos-10.15'
        run: |
          unset HOMEBREW_BREW_GIT_REMOTE HOMEBREW_CORE_GIT_REMOTE
          brew update-reset
          git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" fetch
          git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" fetch

      # Mpm
      - name: Install mpm and its dependencies
        run: |
          poetry install --no-interaction --no-ansi
      - name: mpm CLI output for debugging
        run: |
          poetry run mpm
          poetry run mpm --version
          poetry run mpm managers
      - name: Tests and coverage report in destructive mode
        env:
          DESTRUCTIVE_TESTS: true
        # pyproject.toml config file is specified at CLI level instead of
        # letting coverage find it because of this bug:
        # https://github.com/nedbat/coveragepy/issues/512#issuecomment-399707938
        # https://github.com/pytest-dev/pytest-cov/issues/168#issuecomment-327533847
        # https://github.com/pytest-dev/pytest-cov/issues/243
        run: >
          poetry run
          pytest --cov-config=pyproject.toml --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.0.0
