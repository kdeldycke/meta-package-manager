---
name: Tests
"on":
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run tests every Monday at 9:17 to catch regressions.
    - cron: "17 9 * * 1"

# XXX Concurrency detection sucks and jobs gets killed randonmly.
# concurrency:
#   # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
#   # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
#   cancel-in-progress: true

jobs:

  test-matrix:
    # There is no way to selective flags collections of elements in a matrix, without having to flag all combinations.
    # This will became unmaintainable and tedious so we use this job to pre-compute which jobs is going to get our
    # "stable" flag.
    name: "OS/Python/stable matrix pre-compute"
    runs-on: ubuntu-20.04
    outputs:
      test_matrix: ${{ steps.create_matrix.outputs.matrix }}
    steps:
      - name: Create JSON matrix
        id: create_matrix
        shell: python
        run: |
          import json
          from itertools import product

          # See what each os came pre-installed with at:
          # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
          os_list = {
              #"ubuntu-22.04",
              #"ubuntu-20.04",
              #"ubuntu-18.04",
              #"macos-12",
              "macos-11.0",
              #"macos-10.15",
              #"windows-2022",
              #"windows-2019",
          }
          python_list = {
              "3.7",
              #"3.8",
              #"3.9",
              #"3.10",
              #"3.11.0-alpha.7 - 3.11.0",
          }
          # Safety check to ensure there is no overlap between the 2 sets.
          assert not os_list.intersection(python_list)

          # List of unstable creiterions.
          unstable = [
              # Brew on macOS 10.15 image is plagged with "shallow clone" issues, for which I spent too much
              # time trying to fix. See:
              # https://stackoverflow.com/questions/45782694/how-to-remove-the-shallow-clone-warning-from-homebrew
              # https://stackoverflow.com/questions/65320304/error-while-updating-homebrew-on-my-macbook-pro-big-sur
              # https://github.com/Homebrew/brew/pull/9383
              # https://github.com/Homebrew/brew/pull/9447
              # https://github.com/Homebrew/brew/issues/9420
              # https://github.com/Homebrew/brew/issues/12791
              {"macos-10.15"},
              # Windows tests all prematurely ends with the following error:
              # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!! KeyboardInterrupt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
              # C:\hostedtoolcache\windows\Python\3.9.12\x64\lib\threading.py:316: KeyboardInterrupt
              {"windows-2022"},
              {"windows-2019"},
              # tomllib has been added in Python 3.11.0-alpha.7,
              # but Python 3.11 has not been released yet, hence the range.
              # Python 3.11 runs ends with this error:
              # File ".../python3.11/site-packages/pip/_vendor/packaging/utils.py", line 34, in canonicalize_name
              #       value = _canonicalize_regex.sub("-", name).lower()
              #               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              #   TypeError: expected string or bytes-like object, got 'NoneType'
              {"3.11.0-alpha.7 - 3.11.0"},
          ]

          jobs = []
          for os_id, python_version in product(os_list, python_list):
              job = {
                  "os": os_id,
                  "python-version": python_version,
                  "state": "stable",
              }
              for criterion in unstable:
                  if criterion.issubset(job.values()):
                      job["state"] = "unstable"
                      break
              jobs.append(job)
          matrix = json.dumps({"include": jobs})

          print(f"::set-output name=matrix::{matrix}")

      - name: Print JSON matrix
        run: |
          echo '${{ steps.create_matrix.outputs.matrix }}'
          jq -aR <<< echo '${{ steps.create_matrix.outputs.matrix }}'

  tests:
    needs:
      - test-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.test_matrix) }}
    runs-on: ${{ matrix.os }}
    # We keep going when a job flagged as not stable fails.
    continue-on-error: ${{ matrix.state == 'unstable' }}
    env:
      # Deactivate Homebrew auto-update and verbose output.
      HOMEBREW_NO_ENV_HINTS: "1"
      HOMEBREW_NO_AUTO_UPDATE": "1"
    steps:
      - uses: actions/checkout@v3.0.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux - Fix runner cache folder permissions
        if: runner.os == 'Linux'
        run: |
          mkdir -p /home/runner/.cache
          sudo chown -R runner /home/runner/.cache

      ### Install or upgrade package managers on each platform, and made them
      ### ready to use for mpm.

      # Pip
      - name: Upgrade pip and setuptools
        run: |
          python -m pip install --upgrade setuptools pip

      # Pipx
      - name: Install pipx
        run: |
          python -m pip install --user pipx
          python -m pipx ensurepath

      # Mpm
      - name: Install last mpm release
        run: |
          python -m pipx install meta-package-manager
      - name: mpm inventory for runner debugging
        run: |
          mpm --version
          mpm managers
          mpm installed

      # Homebrew
      - name: macOS - Upgrade Homebrew
        if: runner.os == 'macOS'
        run: |
          brew update
      - name: Linux - Install Homebrew
        if: runner.os == 'Linux'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      - name: Homebrew doctor and tap repair
        if: runner.os != 'Windows'
        run: |
          brew doctor || true
          brew tap --repair

      # Apt
      - name: Linux - Upgrade apt
        if: runner.os == 'Linux'
        run: |
          sudo apt update

      # Chocolatey
      - name: Windows - Upgrade Chocolatey
        if: runner.os == 'Windows'
        run: |
          choco upgrade chocolatey

      # NPM
      - name: "Linux - Ubuntu 18.04 - Install npm requirements"
        if: matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt install --yes node-gyp nodejs-dev libssl1.0-dev
      - name: Linux - Install npm
        if: runner.os == 'Linux'
        run: |
          sudo apt install --yes npm
      - name: macOS - Install npm
        if: runner.os == 'macOS'
        run: |
          # Error: Refusing to uninstall /usr/local/Cellar/node@16/16.15.1
          # because it is required by mongodb-community and mongosh, which are currently installed.
          brew uninstall node@16 mongodb-community mongosh
          brew install npm
      - name: Windows - Upgrade npm
        if: runner.os == 'Windows'
        run: |
          npm install --global npm

      # Cargo
      - name: macOS - Install Cargo
        if: runner.os == 'macOS'
        run: |
          brew install rust
      - name: Linux - Install Cargo
        if: runner.os == 'Linux'
        run: |
          sudo apt install --yes cargo
      - name: Windows - Install Yarn
        if: runner.os == 'Windows'
        run: |
          choco install rust

      # Yarn
      - name: macOS - Install Yarn
        if: runner.os == 'macOS'
        run: |
          brew install yarn
      - name: Linux - Install Yarn
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          sudo apt install --yes yarn
      - name: Windows - Install Yarn
        if: runner.os == 'Windows'
        run: |
          choco install yarn

      # Composer
      - name: macOS - Upgrade Composer
        if: runner.os == 'macOS'
        run: |
          brew upgrade composer
      - name: Windows - Install Composer
        if: runner.os == 'Windows'
        run: |
          choco install composer

      # APM
      # XXX Atom install is broken on macOS, ending with loads of errors like:
      # cp: /private/tmp/d20220706-3576-qlmkfl/Atom.app/./Contents/Resources/ca.lproj: unable to copy extended
      # attributes to /usr/local/Caskroom/atom/1.60.0/Atom.app/Contents/Resources/ca.lproj: No such file or
      # directory
      # - name: macOS - Install Atom
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install --cask atom
      - name: Linux - Install Atom
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
          echo "deb https://packagecloud.io/AtomEditor/atom/any/ any main" | sudo tee /etc/apt/sources.list.d/atom.list
          sudo apt update
          sudo apt install --yes atom
      - name: Windows - Install Atom
        if: runner.os == 'Windows'
        run: |
          choco install atom

      # MAS
      - name: macOS - Install mas
        if: runner.os == 'macOS'
        run: |
          brew install mas

      # Flatpak
      - name: Linux - Install Flatpak
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository --yes ppa:alexlarsson/flatpak
          sudo apt install --yes flatpak

      # DNF
      - name: Linux - Install DNF
        # XXX DNF has been added in Ubuntu 21.04, not before.
        if: matrix.os == 'ubuntu-21.04'
        # if: runner.os == 'Linux'
        run: |
          sudo apt install --yes dnf

      # Zypper
      - name: Linux - Install Zypper
        # XXX Zypper has been added in Ubuntu 20.04, not before.
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install --yes zypper

      # Snap
      - name: Linux - Upgrade Snapd
        if: runner.os == 'Linux'
        run: |
          sudo apt install --yes snapd

      # VSCode
      - name: macOS - Install VSCode
        if: runner.os == 'macOS'
        # XXX Tweak permission to fix this issue:
        # Hint: https://github.com/Homebrew/discussions/discussions/633#discussioncomment-1400084
        # > Run brew install --cask visual-studio-code
        # ==>Downloading https://update.code.visualstudio.com/1.68.1/darwin/stable
        # ==>Downloading from https://az764295.vo.msecnd.net/stable/35f373630/VSCode-darwin.zip
        # Warning: macOS's Gatekeeper has been disabled for this Cask
        # ==>Installing Cask visual-studio-code
        # ==>Purging files for version 1.68.1 of Cask visual-studio-code
        # Error: Directory not empty @ dir_s_rmdir - /private/tmp/d20220706-3993-qik29s
        # Error: Process completed with exit code 1.
        run: |
          sudo chown -R "$USER" /private/tmp/
          brew install --cask visual-studio-code
      - name: Linux - Install VSCode
        if: runner.os == 'Linux'
        run: |
          sudo snap install --classic code
      - name: Windows - Install VSCode
        if: runner.os == 'Windows'
        run: |
          choco install vscode

      # Gem
      - name: macOS & Windows - Upgrade gem
        if: runner.os != 'Linux'
        run: |
          gem update --system
      - name: Linux - Upgrade gem
        if: runner.os == 'Linux'
        run: |
          sudo gem update --system

      # SteamCMD
      - name: macOS - Install SteamCMD
        if: runner.os == 'macOS'
        run: |
          brew install --cask steamcmd
      - name: Linux - Install SteamCMD
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository --yes multiverse
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install --yes lib32gcc-s1
          # Accept Steam license.
          # Source: https://askubuntu.com/a/1017487
          echo steam steam/question select "I AGREE" | sudo debconf-set-selections
          echo steam steam/license note '' | sudo debconf-set-selections
          sudo debconf-show steam
          sudo apt install --yes steam
          sudo apt install --yes steamcmd
      - name: Windows - Install SteamCMD
        if: runner.os == 'Windows'
        run: |
          choco install steamcmd

      # Mpm
      - name: Upgrade Poetry
        run: |
          python -m pip install --upgrade poetry
      - name: Install mpm with Poetry
        run: |
          poetry install --no-interaction --no-ansi
      - name: mpm output for debugging
        run: |
          poetry run mpm
          poetry run mpm --version
          poetry run mpm managers
          poetry run mpm installed

      # Prepare env for tests
      - name: Hack to fix coverage
        # "Can't combine line data with arc data" error
        if: runner.os != 'Windows'
        run: |
          rm -rf .coverage*
      - name: Clean-up .pyc leftovers
        # To eliminate these warnings:
        #   CoverageWarning: Couldn't parse '/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn
        #   /T/pip-install-v4yiyxo1/argparse_2a0cc810c7b545beacef972740eaaabc/argparse.py':
        #   No source for code: '/private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn
        #   /T/pip-install-v4yiyxo1/argparse_2a0cc810c7b545beacef972740eaaabc/argparse.py'. (couldnt-parse)
        # See: https://stackoverflow.com/q/2386975
        if: runner.os != 'Windows'
        run: |
          sudo find / -name "*.pyc" -delete || true
      - name: Tests and coverage report in destructive mode
        env:
          DESTRUCTIVE_TESTS: true
        # pyproject.toml config file is specified at CLI level instead of
        # letting coverage find it because of this bug:
        # https://github.com/nedbat/coveragepy/issues/512#issuecomment-399707938
        # https://github.com/pytest-dev/pytest-cov/issues/168#issuecomment-327533847
        # https://github.com/pytest-dev/pytest-cov/issues/243
        run: |
          poetry run pytest --cov-config=pyproject.toml --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0

      # Mpm final state
      - name: mpm output for debugging
        run: |
          poetry run mpm
          poetry run mpm --version
          poetry run mpm managers
          poetry run mpm installed