---
name: Tests
"on":
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run tests every Monday at 9:17 to catch regressions.
    - cron: "17 9 * * 1"

# XXX Concurrency detection sucks and jobs gets killed randomly.
# concurrency:
#   # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
#   # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
#   cancel-in-progress: true

jobs:

  test-matrix:
    # There is no way to selective flags collections of elements in a matrix, without having to flag all combinations.
    # This will became unmaintainable and tedious so we use this job to pre-compute which jobs is going to get our
    # "stable" flag.
    name: "OS/Python/stable matrix pre-compute"
    runs-on: ubuntu-22.04
    outputs:
      test_matrix: ${{ steps.create_matrix.outputs.matrix }}
    steps:
      - name: Create JSON matrix
        id: create_matrix
        shell: python
        run: |
          import json
          import os
          from itertools import product
          from pathlib import Path

          # See what each os came pre-installed with at:
          # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
          os_list = {
              "ubuntu-22.04",
              "ubuntu-20.04",
              "macos-12",
              "macos-11",
              "windows-2022",
              "windows-2019",
          }
          python_list = {
              "3.7",
              "3.8",
              "3.9",
              "3.10",
              "3.11",
              "3.12-dev",
          }
          # Safety check to ensure there is no overlap between the 2 sets.
          assert not os_list.intersection(python_list)

          # List of unstable creiterions.
          unstable = []

          jobs = []
          for os_id, python_version in product(os_list, python_list):
              job = {
                  "os": os_id,
                  "python-version": python_version,
                  "state": "stable",
              }
              for criterion in unstable:
                  if criterion.issubset(job.values()):
                      job["state"] = "unstable"
                      break
              jobs.append(job)
          matrix = json.dumps({"include": jobs})

          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text(f"matrix={matrix}")

      - name: Print JSON matrix
        run: |
          echo '${{ steps.create_matrix.outputs.matrix }}'
          jq -aR <<< echo '${{ steps.create_matrix.outputs.matrix }}'

  tests:
    needs:
      - test-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.test_matrix) }}
    runs-on: ${{ matrix.os }}
    # We keep going when a job flagged as not stable fails.
    continue-on-error: ${{ matrix.state == 'unstable' }}
    env:
      # XXX Workaround for Windows runners redirecting the output of commands to files. See:
      # https://github.com/databrickslabs/dbx/issues/455#issuecomment-1312770919
      # https://github.com/pallets/click/issues/2121#issuecomment-1312773882
      # https://gist.github.com/NodeJSmith/e7e37f2d3f162456869f015f842bcf15
      PYTHONIOENCODING: "utf8"
      # Deactivate Homebrew auto-update and verbose output.
      HOMEBREW_NO_ENV_HINTS: "1"
      HOMEBREW_NO_AUTO_UPDATE: "1"
    steps:
      - uses: actions/checkout@v3.5.2

      - name: Python ${{ matrix.python-version }} - Install
        uses: actions/setup-python@v4.5.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux - Fix runner cache folder permissions
        if: runner.os == 'Linux'
        run: |
          mkdir -p /home/runner/.cache
          sudo chown -R runner /home/runner/.cache

      ### Install or upgrade package managers on each platform, and made them
      ### ready to use for mpm.

      # Pip
      - name: Pip & Setuptools - Upgrade
        run: |
          python -m pip install --upgrade setuptools pip

      # Pipx
      - name: Pipx - Install
        run: |
          python -m pip install --user pipx
          python -m pipx ensurepath

      # Homebrew
      - name: Homebrew - macOS upgrade
        if: runner.os == 'macOS'
        run: |
          brew update
      - name: Homebrew - Linux install
        if: runner.os == 'Linux'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "/home/linuxbrew/.linuxbrew/bin/" >> "$GITHUB_PATH"
      - name: Homebrew - Doctor and tap repair
        if: runner.os != 'Windows'
        run: |
          brew doctor || true
          brew tap --repair

      # Apt
      - name: APT - Linux upgrade
        if: runner.os == 'Linux'
        run: |
          sudo apt --quiet --yes update

      # Chocolatey
      - name: Chocolatey - Windows upgrade
        if: runner.os == 'Windows'
        run: |
          choco upgrade chocolatey --no-progress --yes

      # NPM
      - name: NPM - Linux install
        if: runner.os == 'Linux'
        run: |
          sudo apt --quiet --yes install npm
      - name: NPM - macOS install
        if: runner.os == 'macOS'
        run: |
          brew install npm
      - name: NPM - Windows upgrade
        if: runner.os == 'Windows'
        run: |
          npm install --global npm

      # Cargo
      - name: Cargo - macOS install
        if: runner.os == 'macOS'
        run: |
          brew install rust
      - name: Cargo - Linux install
        if: runner.os == 'Linux'
        run: |
          sudo apt --quiet --yes install cargo
      - name: Cargo - Windows install
        if: runner.os == 'Windows'
        run: |
          choco install rust --no-progress --yes

      # Yarn
      - name: Yarn - macOS install
        if: runner.os == 'macOS'
        run: |
          brew install yarn

      # XXX Upgrading Yarn on Linux via mpm is not working. Like in Windows below.
      #
      #  ► sudo apt --quiet --yes install yarn
      #  The following NEW packages will be installed:
      #    yarn
      #  (...)
      #  Setting up yarn (1.22.19-1) ...
      #  (...)
      #  _____________ TestUpgrade.test_manager_selection[single_exclusion] _____________
      #  (...)
      #  ----------------------------- Captured stdout call -----------------------------
      #  (...)
      #  ► mpm --exclude pip upgrade --all
      #    Upgrade all outdated packages from apt...
      #    (...)
      #    Upgrade all outdated packages from yarn...
      #  Return code: 1
      #  Traceback (most recent call last):
      #    File ".../site-packages/click/testing.py", line 408, in invoke
      #      return_value = cli.main(args=args or (), prog_name=prog_name, **extra)
      #    File ".../site-packages/click_extra/commands.py", line 159, in main
      #      return super().main(*args, **kwargs)
      #    File ".../site-packages/click/core.py", line 1055, in main
      #      rv = self.invoke(ctx)
      #    File ".../site-packages/click_extra/commands.py", line 213, in invoke
      #      return super().invoke(ctx)
      #    File ".../site-packages/click/core.py", line 1657, in invoke
      #      return _process_result(sub_ctx.command.invoke(sub_ctx))
      #    File ".../site-packages/click/core.py", line 1404, in invoke
      #      return ctx.invoke(self.callback, **ctx.params)
      #    File ".../site-packages/click/core.py", line 760, in invoke
      #      return __callback(*args, **kwargs)
      #    File ".../site-packages/click/decorators.py", line 26, in new_func
      #      return f(get_current_context(), *args, **kwargs)
      #    File ".../meta_package_manager/cli.py", line 892, in upgrade
      #      output = manager.upgrade()
      #    File ".../meta_package_manager/base.py", line 974, in upgrade
      #      return self.run(cli, extra_env=self.extra_env)
      #    File ".../meta_package_manager/base.py", line 643, in run
      #      code, output, error = run_cmd(
      #    File ".../site-packages/click_extra/run.py", line 110, in run_cmd
      #      process = subprocess.run(
      #    File ".../python3.10/subprocess.py", line 503, in run
      #      with Popen(*popenargs, **kwargs) as process:
      #    File ".../python3.10/subprocess.py", line 971, in __init__
      #      self._execute_child(args, executable, preexec_fn, close_fds,
      #    File ".../python3.10/subprocess.py", line 1847, in _execute_child
      #      raise child_exception_type(errno_num, err_msg, err_filename)
      #  FileNotFoundError: [Errno 2] No such file or directory: '/usr/local/bin/yarn'
      #
      # - name: Yarn - Linux install
      #   if: runner.os == 'Linux'
      #   run: |
      #     curl -sSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      #     echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      #     sudo apt --quiet --yes update
      #     sudo apt --quiet --yes install yarn

      # XXX Upgrading Yarn on Windows via mpm is not working, as it seems to requires PATH re-evaluation, which cannot
      # be achieve unless we re-open a new shell. A thing we cannot do in a GitHub Action. So we simply do not install
      # it on Windows for now.
      #
      #   ► choco install yarn --no-progress --yes
      #   Chocolatey v1.3.0
      #   Download of yarn-1.22.19.msi (1.6 MB) completed.
      #   yarn has been installed.
      #   (...)
      #   Environment Vars (like PATH) have changed. Close/reopen your shell to
      #    see the changes (or in powershell/cmd.exe just type `refreshenv`).
      #    The install of yarn was successful.
      #     Software installed as 'msi', install location is likely default.
      #   (...)
      #   ___________ TestUpgrade.test_manager_selection[multiple_exclusions] ___________
      #   (...)
      #   ---------------------------- Captured stdout call -----------------------------
      #   ► mpm --exclude pip --exclude gem upgrade --all
      #     mwarning: cargo does not implement Operations.upgrade_all.
      #     Upgrade all outdated packages from choco...
      #     (...)
      #     warning: Skip unavailable scoop manager.
      #     warning: steamcmd does not implement Operations.upgrade_all.
      #     warning: vscode does not implement Operations.upgrade_all.
      #     Upgrade all outdated packages from yarn...
      #   Return code: 1
      #   Traceback (most recent call last):
      #     File "...\site-packages\click\testing.py", line 408, in invoke
      #       return_value = cli.main(args=args or (), prog_name=prog_name, **extra)
      #     File "...\site-packages\click_extra\commands.py", line 159, in main
      #       return super().main(*args, **kwargs)
      #     File "...\site-packages\click\core.py", line 1055, in main
      #       rv = self.invoke(ctx)
      #     File "...\site-packages\click_extra\commands.py", line 213, in invoke
      #       return super().invoke(ctx)
      #     File "...\site-packages\click\core.py", line 1657, in invoke
      #       return _process_result(sub_ctx.command.invoke(sub_ctx))
      #     File "...\site-packages\click\core.py", line 1404, in invoke
      #       return ctx.invoke(self.callback, **ctx.params)
      #     File "...\site-packages\click\core.py", line 760, in invoke
      #       return __callback(*args, **kwargs)
      #     File "...\site-packages\click\decorators.py", line 26, in new_func
      #       return f(get_current_context(), *args, **kwargs)
      #     File "...\meta_package_manager\cli.py", line 892, in upgrade
      #       output = manager.upgrade()
      #     File "...\meta_package_manager\base.py", line 974, in upgrade
      #       return self.run(cli, extra_env=self.extra_env)
      #     File "...\meta_package_manager\base.py", line 643, in run
      #       code, output, error = run_cmd(
      #     File "...\site-packages\click_extra\run.py", line 110, in run_cmd
      #       process = subprocess.run(
      #     File "...\Python\3.11.2\x64\Lib\subprocess.py", line 548, in run
      #       with Popen(*popenargs, **kwargs) as process:
      #     File "...\Python\3.11.2\x64\Lib\subprocess.py", line 1024, in __init__
      #       self._execute_child(args, executable, preexec_fn, close_fds,
      #     File "...\Python\3.11.2\x64\Lib\subprocess.py", line 1493, in _execute_child
      #       hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
      #   FileNotFoundError: [WinError 2] The system cannot find the file specified
      #
      # - name: Yarn - Windows install
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install yarn --no-progress --yes

      # Composer
      - name: Composer - macOS upgrade
        if: runner.os == 'macOS'
        run: |
          brew upgrade composer
      - name: Composer - Windows upgrade
        if: runner.os == 'Windows'
        run: |
          choco upgrade composer --no-progress --yes

      # MAS
      - name: MAS - macOS install
        if: runner.os == 'macOS'
        run: |
          brew install mas

      # Flatpak
      - name: Flatpak - Linux install
        if: runner.os == 'Linux'
        run: |
          sudo apt --quiet --yes install flatpak

      # Scoop
      - name: Scoop - Windows install
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          iwr get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin

      # DNF
      - name: DNF - Linux install
        # DNF has only been added in Ubuntu 21.04, not before.
        if: runner.os == 'Linux' && matrix.os != 'ubuntu-20.04'
        run: |
          sudo apt --quiet --yes install dnf

      # Zypper
      - name: Zypper - Ubuntu >= 20.04 install
        if: runner.os == 'Linux'
        run: |
          sudo apt --quiet --yes install zypper

      # Snap
      - name: Snap - Linux upgrade
        if: runner.os == 'Linux'
        run: |
          sudo apt --quiet --yes install snapd

      # VSCode
      - name: VSCode - macOS install
        if: runner.os == 'macOS'
        # XXX Tweak permission to fix this issue:
        # Hint: https://github.com/Homebrew/discussions/discussions/633#discussioncomment-1400084
        # > Run brew install --cask visual-studio-code
        # ==>Downloading https://update.code.visualstudio.com/1.68.1/darwin/stable
        # ==>Downloading from https://az764295.vo.msecnd.net/stable/35f373630/VSCode-darwin.zip
        # Warning: macOS's Gatekeeper has been disabled for this Cask
        # ==>Installing Cask visual-studio-code
        # ==>Purging files for version 1.68.1 of Cask visual-studio-code
        # Error: Directory not empty @ dir_s_rmdir - /private/tmp/d20220706-3993-qik29s
        # Error: Process completed with exit code 1.
        run: |
          sudo chown -R "$USER" /private/tmp/
          brew install --cask visual-studio-code
      - name: VSCode - Linux install
        if: runner.os == 'Linux'
        run: |
          sudo snap install --classic code
      - name: VSCode - Windows install
        if: runner.os == 'Windows'
        run: |
          choco install vscode --no-progress --yes

      # Gem
      - name: Ruby & Gem - Windows upgrade
        if: runner.os == 'Windows'
        # The 'refreshenv' call forces the new Ruby version installed by 'choco' to be registered in the 'PATH'.
        # The Import-Module workaround is inspired by:
        # https://github.com/actions/runner-images/discussions/6065
        # https://docs.chocolatey.org/en-us/troubleshooting#why-does-choco-tab-not-work-for-me
        run: |
          choco upgrade ruby --no-progress --yes
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          gem update --quiet --system
      - name: Ruby & Gem - macOS & Ubuntu < 21.04 upgrade
        if: runner.os == 'macOS' || matrix.os == 'ubuntu-20.04'
        run: |
          sudo gem update --quiet --system
      - name: Ruby & Gem - Ubuntu >= 21.04 upgrade
        # As of Ubuntu 21.04, RubyGems is exclusively managed by APT. A call to "sudo gem update --system"
        # ends up with the following error:
        #   ERROR:  Your RubyGems was installed trough APT, and upgrading it through RubyGems
        #   itself is unsupported. If you really need the latest version of RubyGems (tip:
        #   you usually don't), then you need to install RubyGems (and Ruby) manually,
        #   maybe using tools like ruby-install, rvm, etc.
        if: runner.os == 'Linux' && matrix.os != 'ubuntu-20.04'
        run: |
          sudo apt --quiet --yes install ruby-rubygems

      # SteamCMD
      - name: SteamCMD - macOS install
        if: runner.os == 'macOS'
        run: |
          brew install --cask steamcmd
      - name: SteamCMD - Linux install
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository --yes multiverse
          sudo dpkg --add-architecture i386
          sudo apt --quiet --yes update
          sudo apt --quiet --yes install lib32gcc-s1
          # Accept Steam license.
          # Source: https://askubuntu.com/a/1017487
          echo steam steam/question select "I AGREE" | sudo debconf-set-selections
          echo steam steam/license note '' | sudo debconf-set-selections
          sudo debconf-show steam
          sudo apt --quiet --yes install steam
          sudo apt --quiet --yes install steamcmd
      - name: SteamCMD - Windows install
        if: runner.os == 'Windows'
        run: |
          choco install steamcmd --no-progress --yes

      # Mpm
      - name: Poetry - Upgrade
        run: |
          python -m pip install --upgrade poetry
      - name: mpm - Install
        run: |
          poetry install --no-interaction --no-ansi
      - name: mpm --help
        run: |
          poetry run mpm
      - name: mpm --version
        run: |
          poetry run mpm --version
      - name: mpm managers
        run: |
          poetry run mpm managers
      - name: mpm --all-managers managers
        run: |
          poetry run mpm --all-managers managers

      - name: Parallel non-destructive tests
        # XXX ./meta_package_manager/tests/ is specified at CLI level instead of using the ``testpaths`` parameter
        #   from pyproject.toml because of this bug: https://github.com/pytest-dev/pytest/issues/10665
        run: >
          poetry run pytest --exitfirst
          --numprocesses=auto --run-non-destructive --skip-destructive
          ./meta_package_manager/tests/

      - name: Non-parallel destructive tests
        # XXX ./meta_package_manager/tests/ is specified at CLI level instead of using the ``testpaths`` parameter
        #   from pyproject.toml because of this bug: https://github.com/pytest-dev/pytest/issues/10665
        run: >
          poetry run pytest --exitfirst
          --numprocesses=0 --skip-non-destructive --run-destructive
          ./meta_package_manager/tests/

      - name: Coverage - Upload Codecov
        uses: codecov/codecov-action@v3.1.3